---
global:
  # This values.yaml file is an example of all possible
  # deployment configurations.  For more information about
  # each configuration option, see the project readme.

  # Enter your Kubernetes provider.
  provider: "YOUR_KUBERNETES_PROVIDER"

  # Deploy Pega nodes
  actions:
    execute: "deploy"

  # Provide JDBC connection information to the Pega relational database
  #   If you are installing or upgrading on IBM DB2, update the udb.conf file in the /charts/pega/charts/installer/config/udb directory with any additional connection properties.
  jdbc:
    #   url	Valid values are:
    #
    #   Oracle              jdbc:oracle:thin:@//localhost:1521/dbName
    #   IBM DB/2 z / OS 	jdbc:db2://localhost:50000/dbName
    #   IBM DB/2            jdbc:db2://localhost:50000/dbName:fullyMaterializeLobData=true;fullyMaterializeInputStreams=true;
    #                       progressiveStreaming=2;useJDBC4ColumnNameAndLabelSemantics=2;
    #   SQL Server          jdbc:sqlserver://localhost:1433;databaseName=dbName;selectMethod=cursor;sendStringParametersAsUnicode=false
    #   PostgreSQL          jdbc:postgresql://localhost:5432/dbName
    url: "YOUR_JDBC_URL"
    #   driverClass 	-- jdbc class.  Valid values are:
    #
    #   Oracle              oracle.jdbc.OracleDriver
    #   IBM DB/2            com.ibm.db2.jcc.DB2Driver
    #   SQL Server          com.microsoft.sqlserver.jdbc.SQLServerDriver
    #   PostgreSQL          org.postgresql.Driver
    driverClass: "YOUR_JDBC_DRIVER_CLASS"
    #   pega.database.type	Valid values are: mssql, oracledate, udb, db2zos, postgres
    dbType: "YOUR_DATABASE_TYPE"
    #   For databases that use multiple JDBC driver files (such as DB2), specify comma separated values for 'driverUri'
    driverUri: "YOUR_JDBC_DRIVER_URI"
    username: "YOUR_JDBC_USERNAME"
    password: "YOUR_JDBC_PASSWORD"
    # CUSTOM CONNECTION PROPERTIES
    # Add a list of ; delimited connections properties. The list must end with ;
    # For example: connectionProperties=user=usr;password=pwd;
    connectionProperties: ""
    rulesSchema: "YOUR_RULES_SCHEMA"
    dataSchema: "YOUR_DATA_SCHEMA"
    customerDataSchema: ""

  # If using a custom Docker registry, supply the credentials here to pull Docker images.
  docker:
    registry:
      url: "YOUR_DOCKER_REGISTRY"
      username: "YOUR_DOCKER_REGISTRY_USERNAME"
      password: "YOUR_DOCKER_REGISTRY_PASSWORD"
      # Docker image information for the Pega docker image, containing the application server.
    pega:
      image: "pegasystems/pega"

  # Upgrade specific properties
  upgrade:
    # Configure only for aks/pks
    # Run "kubectl cluster-info" command to get the service host and https service port of kubernetes api server.
    # Example - Kubernetes master is running at https://<service_host>:<https_service_port>
    kube-apiserver:
      serviceHost: "API_SERVICE_ADDRESS"
      httpsServicePort: "SERVICE_PORT_HTTPS"

  # Specify the Pega tiers to deploy
  tier:
    - name: "web"
      # Create a an interactive tier for web users.  This tier uses
      # the WebUser node type and will be exposed via a service to
      # the load balancer.
      nodeType: "WebUser"

      service:
        # Enter the domain name to access web nodes via a load balancer.
        #  e.g. web.mypega.example.com
        domain: "YOUR_WEB_NODE_DOMAIN"
        port: 80
        targetPort: 8080
        # When provider is eks, configure alb cookie duration seconds equal to passivation time of requestors
        alb_stickiness_lb_cookie_duration_seconds: 3660

      replicas: 1
      cpuRequest: 200m
      memRequest: "6Gi"
      cpuLimit: 2
      memLimit: "8Gi"
      javaOpts: ""
      initialHeap: "4096m"
      maxHeap: "7168m"

      pegaDiagnosticUser: ""
      pegaDiagnosticPassword: ""

      deploymentStrategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate

      hpa:
        enabled: true
        minReplicas: 2
        maxReplicas: 5
        targetAverageMemoryUtilization: 185

    - name: "batch"
      # Create a background tier for batch processing.  This tier uses
      # a collection of background node types and will not be exposed to
      # the load balancer.
      nodeType: "BackgroundProcessing,Search,Batch,RealTime,Custom1,Custom2,Custom3,Custom4,Custom5,BIX"

      replicas: 1
      cpuRequest: 200m
      memRequest: "6Gi"
      cpuLimit: 2
      memLimit: "8Gi"
      javaOpts: ""
      initialHeap: "4096m"
      maxHeap: "7168m"

      pegaDiagnosticUser: ""
      pegaDiagnosticPassword: ""

      deploymentStrategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate

      hpa:
        enabled: true
        minReplicas: 1
        maxReplicas: 5
        targetAverageCPUUtilization: 700

    - name: "stream"
      # Create a stream tier for queue processing.  This tier deploys
      # as a stateful set to ensure durability of queued data. It may
      # be optionally exposed to the load balancer.
      nodeType: "Stream"

      service:
        # Enter the domain name to access stream nodes via a load balancer.
        #  e.g. stream.mypega.example.com
        domain: "YOUR_STREAM_NODE_DOMAIN"
        port: 7003
        targetPort: 7003
        # When provider is eks, configure alb cookie duration seconds equal to passivation time of requestors
        alb_stickiness_lb_cookie_duration_seconds: 3660

      replicas: 2
      cpuRequest: 200m
      memRequest: "6Gi"
      cpuLimit: 2
      memLimit: "8Gi"
      javaOpts: ""
      initialHeap: "4096m"
      maxHeap: "7168m"

      volumeClaimTemplate:
        resources:
          requests:
            storage: 5Gi

# External services

# Cassandra automatic deployment settings.
cassandra:
  enabled: true
  persistence:
    enabled: true
  resources:
    requests:
      memory: "4Gi"
      cpu: 2
    limits:
      memory: "8Gi"
      cpu: 4

# DDS (external Cassandra) connection settings.
# These settings should only be modified if you are using a custom Cassandra deployment.
dds:
  externalNodes: ""
  port: "9042"
  username: "dnode_ext"
  password: "dnode_ext"

# Elasticsearch deployment settings.
# Note: This Elasticsearch deployment is used for Pega search, and is not the same Elasticsearch deployment used by the EFK stack.
# These search nodes will be deployed regardless of the Elasticsearch configuration above.
pegasearch:
  image: "pegasystems/search"
  memLimit: "3Gi"

# Pega Installer settings
installer:
  image: "YOUR_INSTALLER_IMAGE:TAG"
  adminPassword: "ADMIN_PASSWORD"
  # Upgrade specific properties
  upgrade:
    # Type of upgrade
    # Valid values are 'in-place' , 'out-of-place'
    upgradeType: "in-place"
    # Specify target rules schema for migration and upgrade
    targetRulesSchema: ""
